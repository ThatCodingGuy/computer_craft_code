local lua_helpers = dofile("./gitlib/turboCo/lua_helpers.lua")
local movement = dofile("./gitlib/turboCo/movement.lua")

local class = lua_helpers.class

--- A parser object for reading a file containing 3D integer coordinates. Coordinates are expected
-- to be listed one per line.
-- @param file_name The name of the file containing the coordinates.
FuelCoordParser = class({}, function(file_name)
    local function split(text, delimiter)
        local fragments = {}
        local current_index = 1
        local next_index = text:find(delimiter)
        while next_index do
            fragments[#fragments + 1] = text:sub(current_index, next_index - 1)
            current_index = next_index + 1
            next_index = text:find(delimiter, next_index + 1)
        end
        fragments[#fragments + 1] = text:sub(current_index)
        return fragments
    end

    --- Loads the coordinate file and parses its contents, returning an array of coordinates as
    -- generated by a call to `movement.coord`.
    local function parse()
        local coordinates = {}
        for line in io.lines(file_name) do
            local coord_strings = split(line, ",")
            local validated_coords = {}
            for i = 1, #coord_strings do
                local coord_string = coord_strings[i]
                if string.match(coord_string, "^%d+$") then
                    validated_coords[#validated_coords + 1] = tonumber(coord_string)
                else
                    print("Could not parse \"" .. coord_string .. "\" as an integer.")
                end
            end

            if #validated_coords == 3 then
                coordinates[#coordinates + 1] = movement.coord(
                        validated_coords[1],
                        validated_coords[2],
                        validated_coords[3])
            end
        end
        return coordinates
    end

    return {
        parse = parse,
    }
end)

return FuelCoordParser
